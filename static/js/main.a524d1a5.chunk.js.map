{"version":3,"sources":["component/card/card.jsx","component/card-list/card-list.jsx","component/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","names","map","user","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","searchedNames","filter","toLowerCase","includes","toLocaleLowerCase","e","target","value","onClick","textString","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,8BACtB,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAAAR,GAAK,OAC3B,qBAAKC,UAAY,YAAjB,SACMD,EAAMS,MAAMC,KAAI,SAAAC,GAAI,OACpB,cAAC,EAAD,CAAsBP,QAAWO,GAApBA,EAAKN,UCJbO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAcC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOb,UAAW,SACdc,KAAM,SACNC,YAAeH,EACfI,SAAaH,MCqCNI,E,kDArCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXV,MAAO,GACPW,YAAa,IAJJ,E,qDAQb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACjB,MAAQgB,S,oBAGxC,WAAS,IAAD,SACwBE,KAAKR,MAA5BV,EADD,EACCA,MAAOW,EADR,EACQA,YACRQ,EAAgBnB,EAAMoB,QAAQ,SAAAlB,GAAI,OACtCA,EAAKL,KAAKwB,cAAcC,SAASX,EAAYY,wBAC/C,OACE,qBAAK/B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qDACA,cAAC,EAAD,CAAWY,YAAe,iBAAkBC,aAAiB,SAAAmB,GACzD,EAAKP,SAAS,CAACN,YAAaa,EAAEC,OAAOC,WAGzC,cAAC,EAAD,CAAU1B,MAASmB,IAInB,wBAAQQ,QAAU,kBAAM,EAAKV,SAAS,CAACW,WAAa,oBAApD,kC,GAhCQC,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a524d1a5.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) => (\n    <div className = \"card-container\">\n        <img alt=\"monster\" src = {`https://robohash.org/${props.monster.id}?set=set2&size = 180*180`}></img>\n        <h1> {props.monster.name}</h1>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React  from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card';\n\nexport const CardList = props => (\n  <div className = 'card-list'> \n       {props.names.map(user => (\n        <Card key = {user.id} monster = {user} /> ))}\n    </div>\n)","import React from 'react'\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeHolder , handleChange}) => (\n    <input className ='search'\n        type= 'search' \n        placeholder = {placeHolder} \n        onChange = { handleChange } \n    />\n);","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './component/card-list/card-list';\nimport { SearchBox } from './component/search-box/search-box';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      names: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({names : users}))\n  }\n\n  render(){\n    const {names, searchField } = this.state;\n    const searchedNames = names.filter( user =>\n      user.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Manish Test Project</h1>\n          <SearchBox placeHolder = {'Search monster'} handleChange = { e => {\n              this.setState({searchField: e.target.value})\n            }} \n          />\n          <CardList names = {searchedNames} >\n          </CardList>\n         \n          \n          <button onClick= {() => this.setState({textString : 'Hello Superman' })}>Change Text</button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}